"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/index.ts
var _kysely = require('kysely');
var _postgres = require('@vercel/postgres');

// src/error.ts
var VercelPostgresKyselyError = class extends Error {
  constructor(code, message) {
    super(`VercelPostgresError - '${code}': ${message}`);
    this.code = code;
    this.name = "VercelPostgresError";
  }
};

// src/index.ts
var VercelPostgresDialect = class extends _kysely.PostgresDialect {
  constructor(config) {
    super(config);
    this.config = config;
  }
  createDriver() {
    return new VercelPostgresPoolDriver(this.config);
  }
};
var VercelPostgresPoolDriver = class extends _kysely.PostgresDriver {
  // Rather than trying to rebuild a perfectly good connection pool,
  // we can just use a proxy to throw if the user tries to stream.
  async acquireConnection() {
    const connection = await super.acquireConnection();
    return new Proxy(connection, {
      // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
      get(target, p) {
        const original = target[p];
        if (p === "streamQuery" && typeof original === "function") {
          throw new VercelPostgresKyselyError(
            "kysely_streaming_not_supported",
            "Streaming is not supported yet."
          );
        }
        if (typeof original === "function") {
          return original.bind(target);
        }
        return original;
      }
    });
  }
  beginTransaction() {
    throw new VercelPostgresKyselyError(
      "kysely_transactions_not_supported",
      "Transactions are not supported yet."
    );
  }
  commitTransaction() {
    throw new VercelPostgresKyselyError(
      "kysely_transactions_not_supported",
      "Transactions are not supported yet."
    );
  }
  rollbackTransaction() {
    throw new VercelPostgresKyselyError(
      "kysely_transactions_not_supported",
      "Transactions are not supported yet."
    );
  }
};
function createKysely(config) {
  return new (0, _kysely.Kysely)({
    dialect: new VercelPostgresDialect({
      ...config,
      pool: _postgres.createPool.call(void 0, config)
    })
  });
}


exports.createKysely = createKysely;
//# sourceMappingURL=index.cjs.map